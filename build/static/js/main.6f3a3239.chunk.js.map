{"version":3,"sources":["components/main.jsx","components/buttons.jsx","components/resultDislay.jsx","App.js","serviceWorker.js","index.js"],"names":["Main","onClick","button","calculate","reset","setState","result","state","checkResult","eval","e","className","this","Component","Buttons","name","props","target","ResultDislay","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6f3a3239.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Buttons from '../components/buttons';\r\nimport ResultDislay from \"../components/resultDislay\";\r\nimport '../App.css';\r\nclass Main extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            result: \"\"\r\n        }\r\n    }\r\n\r\n    onClick = button => {\r\n\r\n        if (button === \"=\") {\r\n            this.calculate()\r\n        }\r\n\r\n        else if (button === \"clear\") {\r\n            this.reset()\r\n        }\r\n\r\n        else {\r\n            this.setState({\r\n                result: this.state.result + button\r\n            })\r\n        }\r\n    };\r\n    calculate = () => {\r\n        var checkResult = ''\r\n        if (this.state.result) {\r\n            checkResult = this.state.result\r\n        }\r\n\r\n        else {\r\n            checkResult = this.state.result\r\n\r\n        }\r\n\r\n        try {\r\n            this.setState({\r\n                result: (eval(checkResult) || \"\") + \"\"\r\n            })\r\n        }\r\n\r\n        catch (e) {\r\n            this.setState({\r\n                result: \"error\"\r\n            })\r\n        }\r\n    };\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            result: \"\"\r\n        })\r\n    };\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='cal-body'>\r\n\r\n                    <ResultDislay result={this.state.result} />\r\n                    <Buttons onClick={this.onClick} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n\r\n","import React, { Component } from 'react';\r\n\r\nclass Buttons extends Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className='button'>\r\n\r\n                    <button name=\"clear\" className='wide-button' onClick={e => this.props.onClick(e.target.name)}>clear</button>\r\n                    <button name=\"/\" className='side-button' onClick={e => this.props.onClick(e.target.name)}>รท</button><br />\r\n\r\n\r\n                    <button name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</button>\r\n                    <button name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</button>\r\n                    <button name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</button>\r\n                    <button name=\"-\"  className='side-button' onClick={e => this.props.onClick(e.target.name)}>-</button><br />\r\n\r\n                    <button name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</button>\r\n                    <button name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</button>\r\n                    <button name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</button>\r\n                    <button name=\"+\" className='side-button' onClick={e => this.props.onClick(e.target.name)}>+</button><br />\r\n\r\n                    <button name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</button>\r\n                    <button name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</button>\r\n                    <button name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</button>\r\n                    <button name=\"=\" className='side-button' onClick={e => this.props.onClick(e.target.name)}>=</button>\r\n\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\n\r\nclass ResultDislay extends Component {\r\n    render() {\r\n        let {result} = this.props;\r\n        return (\r\n            <div className=\"result\">\r\n                <p>{result}</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultDislay;","import React from 'react';\nimport './App.css';\nimport Main from './components/main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Calculator</h1>    \n    </header>\n\n    <Main />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}